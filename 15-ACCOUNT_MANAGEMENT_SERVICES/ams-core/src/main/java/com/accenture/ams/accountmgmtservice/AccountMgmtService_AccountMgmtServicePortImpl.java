package com.accenture.ams.accountmgmtservice;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;

import javax.jws.WebService;
import javax.xml.ws.BindingType;

import wsclient.accountmgmt.avs.accenture.ports.accountmgmtservice_v1.AccountMgmtPort;
import wsclient.types.accountmgmt.avs.accenture.AccountMgmtResponse;
import wsclient.types.accountmgmt.avs.accenture.CrmAccountMgmtRequest;
import wsclient.types.accountmgmt.avs.accenture.CrmContentPurchaseRequest;
import wsclient.types.accountmgmt.avs.accenture.SdpAccountProfileDataResponse;
import wsclient.types.accountmgmt.avs.accenture.SdpDataRequest;
import wsclient.types.accountmgmt.avs.accenture.SdpPartyProfileDataResponse;
import wsclient.types.accountmgmt.avs.accenture.UpdateCrmAccountCommercialProfileRequest;
import wsclient.types.accountmgmt.avs.accenture.UpdateUserPwdRequest;
import wsclient.types.accountmgmt.avs.accenture.UpdateUserRequest;

import com.accenture.ams.accountmgmtservice.crmAccountMgmt.ActionExecutor;
import com.accenture.ams.accountmgmtservice.crmAccountMgmt.InsertCrmAccount;
import com.accenture.ams.accountmgmtservice.crmAccountMgmt.UpdateCrmAccount;
import com.accenture.ams.accountmgmtservice.crmContentPurchase.CrmContentPurchase;
import com.accenture.ams.accountmgmtservice.sdpAccountProfileDataService.SdpAccountProfileDataService;
import com.accenture.ams.accountmgmtservice.sdpPartyProfileDataService.SdpPartyProfileDataService;
import com.accenture.ams.accountmgmtservice.updateCrmAccountCommercialProfile.UpdateComProfService;
import com.accenture.ams.accountmgmtservice.updatePwdService.UpdateUserPasswordService;
import com.accenture.ams.accountmgmtservice.updateUserServices.UpdateUserService;
import com.accenture.ams.db.util.HibernateUtil;
import com.accenture.ams.db.util.LogUtil;
import com.sun.xml.ws.developer.SchemaValidation;


/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.4 Generated
 * source version: 2.1
 * 
 */
@SchemaValidation(handler = com.accenture.ams.accountmgmtservice.InputRequestError.class)
@WebService(portName = "AccountMgmtServicePort", serviceName = "AccountMgmtService", targetNamespace = "http://ws.be.avs.accenture.com/AccountMgmtService-v1", wsdlLocation = "WEB-INF/wsdl/AccountManagement/AVS_AccountManagement_Service.wsdl", endpointInterface = "wsclient.accountmgmt.avs.accenture.ports.accountmgmtservice_v1.AccountMgmtPort")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
public class AccountMgmtService_AccountMgmtServicePortImpl implements
		AccountMgmtPort {

	protected static long TR_MAPPING_LOG4J_PROPERTIES_FILE;
	protected static String MAPPING_LOG4J_XML_FILE;
	protected static final String ENV_AMS_PROPERTIES = "/ams.properties";

	// private static Logger log = Logger.getLogger("com.accenture.ams");

	public AccountMgmtService_AccountMgmtServicePortImpl() {
		LogUtil.writeCommonLog("INFO",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "WS Initialization...");
		// enviroment variables maps

		Map<String, String> menv = System.getenv();
		String propertyPath = menv
				.get(AccountMgmtServiceConstant.AMS_PROPERTIES_PATH_ENV);
		initLogger(propertyPath);
		if (!HibernateUtil.getInstance().isInitialized())
			initTenantConfiguration(propertyPath);
	}

	/**
	 * 
	 * @param crmAccountMgmtRequest
	 * @return returns types.accountmgmt.avs.accenture.AccountMgmtResponse
	 */
	public AccountMgmtResponse crmAccountMgmtService(
			CrmAccountMgmtRequest crmAccountMgmtRequest) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in crmAccountMgmtService : " + crmAccountMgmtRequest.toString());
		/* START INPUT CHECK */
		String errorDescription = checkRequest();

		if (errorDescription != null)
			return createErrorResponse(errorDescription);
		/* END INPUT CHECK */

		String opType = crmAccountMgmtRequest.getOperationType();
		ActionExecutor ae;
		String tenantName = crmAccountMgmtRequest.getPayload().getTenantName();
		// tenantName = crmAccountMgmtRequest.getTenantName();
		if (opType.equalsIgnoreCase(AccountMgmtServiceConstant.INSERT)) {
			ae = new InsertCrmAccount(tenantName);
		} else {
			ae = new UpdateCrmAccount(tenantName);
		}

		ae.setPayload(crmAccountMgmtRequest.getPayload());

		try {
			return ae.execute();
		} catch (MissingParameterException e) {
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_MISSING_PARAM,
					e.getMessage());
		} catch (DbErrorException dbe) {
			return Utils.getResponse(AccountMgmtServiceConstant.RET_DB_ERROR,
					dbe.getMessage());
		} catch (GenericException ge) {
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_GENERIC_ERROR,
					ge.getMessage());
		}
	}

	/**
	 * 
	 * @param updateUserPwdRequest
	 * @return returns types.accountmgmt.avs.accenture.AccountMgmtResponse
	 */
	public AccountMgmtResponse updateUserPwdService(
			UpdateUserPwdRequest updateUserPwdRequest) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in updateUserPwdService");
		/* START INPUT CHECK */
		String errorDescription = checkRequest();
		if (errorDescription != null)
			return createErrorResponse(errorDescription);
		/* END INPUT CHECK */
		AccountMgmtResponse resp = null;

		String userName = updateUserPwdRequest.getUserName();
		String oldPass = updateUserPwdRequest.getOldPassword();
		String newPass = updateUserPwdRequest.getNewPassword();
		String opType = null;
		if(updateUserPwdRequest.getType() != null){
			opType = updateUserPwdRequest.getType().value();
		}
		String tenantName = updateUserPwdRequest.getTenantName();
		// tenantName = crmAccountMgmtRequest.getTenantName();
		UpdateUserPasswordService uups = new UpdateUserPasswordService(
				tenantName);
		resp = uups.changePassword(userName, oldPass, newPass, opType);

		return resp;
	}

	/**
	 * 
	 * @param updateUserRequest
	 * @return returns types.accountmgmt.avs.accenture.AccountMgmtResponse
	 */
	public AccountMgmtResponse updateUserService(
			UpdateUserRequest updateUserRequest) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in updateUserService");
		/* START INPUT CHECK */
		String errorDescription = checkRequest();
		if (errorDescription != null)
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_MISSING_PARAM,
					errorDescription);
		/* END INPUT CHECK */
		AccountMgmtResponse resp = null;
		String tenantName = updateUserRequest.getTenantName();
		// tenantName = crmAccountMgmtRequest.getTenantName();
		UpdateUserService service = new UpdateUserService(updateUserRequest,
				tenantName);

		resp = service.updateUser();

		return resp;
	}

	/**
	 * 
	 * @param updateCrmAccountCommercialProfileRequest
	 * @return returns types.accountmgmt.avs.accenture.AccountMgmtResponse
	 */
	public AccountMgmtResponse updateCrmAccountCommercialProfileService(
			UpdateCrmAccountCommercialProfileRequest updateCrmAccountCommercialProfileRequest) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in updateCrmAccountCommercialProfileService");
		/* START INPUT CHECK */
		RequestValidatorUtil validator = RequestValidatorUtil.getInstance();

		if (validator.isErrorPresent())
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_MISSING_PARAM,
					validator.getLastError().getMessage());
		/* END INPUT CHECK */
		String tenantName = "";
		tenantName = updateCrmAccountCommercialProfileRequest.getTenantName();
		UpdateComProfService service = new UpdateComProfService(
				updateCrmAccountCommercialProfileRequest, tenantName);
		AccountMgmtResponse resp = service.execute();
		return resp;
	}

	/**
	 * 
	 * @param crmContentPurchaseRequest
	 * @return returns types.accountmgmt.avs.accenture.AccountMgmtResponse
	 */
	public AccountMgmtResponse crmContentPurchaseService(
			CrmContentPurchaseRequest crmContentPurchaseRequest) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in crmContentPurchaseService");
		/* START INPUT CHECK */
		String errorDescription = checkRequest();
		if (errorDescription != null)
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_MISSING_PARAM,
					errorDescription);
		/* END INPUT CHECK */
		CrmContentPurchase service = new CrmContentPurchase();
		try {
			service.readRequest(crmContentPurchaseRequest);
		} catch (Exception e) {
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_GENERIC_ERROR,
					e.getMessage());
		}
		try {
			service.loadConfigurationData();
		} catch (Exception e) {
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_GENERIC_ERROR,
					e.getMessage());
		}
		AccountMgmtResponse response = null;
		try {
			response = service.execute();
		} catch (Exception e) {
			return Utils.getResponse(
					AccountMgmtServiceConstant.RET_GENERIC_ERROR,
					e.getMessage());
		}
		return response;
	}

	/**
	 * Check if request is correct, according to WDSL rules
	 * 
	 * @return : Error description if check fails, NULL otherwise
	 */
	protected String checkRequest() {
//		MessageContext context = ctx.getMessageContext();		
//		SAXParseException errorException = (SAXParseException)
//		context.get(AccountMgmtServiceConstant.ERROR);
//		if (errorException != null) {
//			resp.setResultCode(AccountMgmtServiceConstant.RET_CODE[AccountMgmtServiceConstant.RET_GENERIC_ERROR ] );
//			StringBuffer desc = new StringBuffer(AccountMgmtServiceConstant.RET_DESC[AccountMgmtServiceConstant.RET_GENERIC_ERROR]);
//			desc.append("|" + errorException.getMessage());
//			resp.setResultDescription( desc.toString() );
//			return desc.toString();
//		}
		return null;
	}

	private AccountMgmtResponse createErrorResponse(String errorDesc) {
		AccountMgmtResponse resp = new AccountMgmtResponse();
		resp.setResultCode(AccountMgmtServiceConstant.RET_CODE[AccountMgmtServiceConstant.RET_GENERIC_ERROR]);
		StringBuffer desc = new StringBuffer(
				AccountMgmtServiceConstant.RET_DESC[AccountMgmtServiceConstant.RET_GENERIC_ERROR]);
		desc.append("|" + errorDesc);
		resp.setResultDescription(desc.toString());
		return resp;
	}

	private void initLogger(String propertyPath) {
		FileInputStream isFile = null;
		String fullPath = propertyPath
				+ File.separator + AccountMgmtServiceConstant.AMS_PROPERTIES_FILE;
		File file = new File(fullPath);
		Properties props = new Properties();

		try {
			isFile = new FileInputStream(file);
			props.load(isFile);
		} catch (FileNotFoundException e1) {
			LogUtil.writeCommonLog("DEBUG",
					AccountMgmtService_AccountMgmtServicePortImpl.class,
					"INTERNAL", AccountMgmtServiceConstant.AMS_PROPERTIES_FILE
							+ " not found und properties path...use default!");
		} catch (IOException e1) {
			LogUtil.writeCommonLog("ERROR",
					AccountMgmtService_AccountMgmtServicePortImpl.class,
					"INTERNAL", "ERROR: Cannot read properties file. Cause : "
							+ e1);
		}
		String reloadTime = props.getProperty("LOG4J_RELOAD_TIME");
		Long relodTimeLong = 1L;
		try{
			relodTimeLong = Long.parseLong(reloadTime);
		}
		catch(Exception e){
			LogUtil.writeCommonLog("ERROR",
					AccountMgmtService_AccountMgmtServicePortImpl.class,
					"INTERNAL", "ERROR: Logger reload time value is incorrect. Using default. Exception : "
							+ e);
			relodTimeLong = AccountMgmtServiceConstant.AMS_LOG4J_RELOAD_TIME_DEF;
		}
		String log4jConfigFile = props.getProperty("LOG4J_XML_FILE");
		initLog4JfromXml(propertyPath + File.separator + log4jConfigFile, relodTimeLong);
		System.out.println("FILE PROPERTIES: " + file.toString());
		try {
			isFile.close();
		} catch (IOException e) {
			LogUtil.writeCommonLog("ERROR",
					AccountMgmtService_AccountMgmtServicePortImpl.class,
					"INTERNAL",
					"ERROR: Exception closing properties inputStream. Cause : "
							+ e);
		}
		LogUtil.writeCommonLog("INFO",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "Init Servlet");
	}

	private boolean initTenantConfiguration(String propertyPath) {
		FileInputStream isFile = null;
		/*
		 * check if tenant.properties exist under AMS properties file path first
		 * elsewhere use the defualt tenant.properties under classpath
		 */
		//TODO cambiare il path
		String fullPath = propertyPath
				+ AccountMgmtServiceConstant.TENANT_PROPERTIES;
		File tenantPropertyFile = new File(fullPath);
		Properties prop = new Properties();

		try {
			isFile = new FileInputStream(tenantPropertyFile);
			prop.load(isFile);
		} catch (FileNotFoundException e1) {
			LogUtil.writeCommonLog("DEBUG",
					AccountMgmtService_AccountMgmtServicePortImpl.class,
					"INTERNAL",
					"tenant.properties not found und properties path...use default!");
		} catch (IOException e1) {
			LogUtil.writeCommonLog("ERROR",
					AccountMgmtService_AccountMgmtServicePortImpl.class,
					"INTERNAL", "ERROR: Cannot read properties file. Cause : "
							+ e1);
			return false;
		}
		return HibernateUtil.getInstance().initSessionFactories(prop);
	}

	private void initLog4JfromXml(String log4jxmlPath, Long reloadTime) {
		System.out.println(log4jxmlPath);
		org.apache.log4j.xml.DOMConfigurator.configureAndWatch(log4jxmlPath,
				reloadTime);
	}

	public SdpPartyProfileDataResponse getSdpPartyProfileDataService(
			SdpDataRequest sdpDataRequestParty) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in getSdpPartyProfileDataService");
		/* START INPUT CHECK */
		String errorDescription = checkRequest();

		if (errorDescription != null)
			return Utils.getSdpPartyProfileDataResponse(
					AccountMgmtServiceConstant.RET_MISSING_PARAM,
					errorDescription, null);
		/* END INPUT CHECK */

		SdpPartyProfileDataResponse response = null;
		String tenantName = sdpDataRequestParty.getTenantName();
		String crmAccountId = sdpDataRequestParty.getCrmAccountId();
		Long userId = Long.parseLong(sdpDataRequestParty.getUserId());

		SdpPartyProfileDataService sppds = new SdpPartyProfileDataService(
				tenantName);

		try {
			response = sppds
					.getSdpPartyProfileDataService(crmAccountId, userId);
		} catch (DbErrorException dbe) {
			return Utils.getSdpPartyProfileDataResponse(
					AccountMgmtServiceConstant.RET_DB_ERROR, dbe.getMessage(),
					null);
		} catch (GenericException ge) {
			if (ge.getMessage().equals("RET_USER_NOT_PRESENT")) {
				return Utils.getSdpPartyProfileDataResponse(
						AccountMgmtServiceConstant.RET_USER_NOT_PRESENT, null,
						null);
			} else if (ge.getMessage().equals("RET_CRM_ACC_NOT_EXIST")) {
				return Utils.getSdpPartyProfileDataResponse(
						AccountMgmtServiceConstant.RET_CRM_ACC_NOT_EXIST, null,
						null);
			} else {
				return Utils.getSdpPartyProfileDataResponse(
						AccountMgmtServiceConstant.RET_GENERIC_ERROR,
						ge.getMessage(), null);
			}
		}

		return response;
	}

	public SdpAccountProfileDataResponse getSdpAccountProfileDataService(
			SdpDataRequest sdpDataRequestProfile) {
		LogUtil.writeCommonLog("DEBUG",
				AccountMgmtService_AccountMgmtServicePortImpl.class,
				"INTERNAL", "I'm in getSdpAccountProfileDataService");
		/* START INPUT CHECK */
		String errorDescription = checkRequest();
		if (errorDescription != null)
			return Utils.getSdpAccountProfileDataResponse(
					AccountMgmtServiceConstant.RET_MISSING_PARAM,
					errorDescription, null);
		/* END INPUT CHECK */

		SdpAccountProfileDataResponse accountResponse = new SdpAccountProfileDataResponse();

		SdpAccountProfileDataService sdpAccountProfileDataService = new SdpAccountProfileDataService(
				sdpDataRequestProfile);

		try {
			accountResponse = sdpAccountProfileDataService
					.getAcoountProfileDetails();
		} catch (DbErrorException dbe) {
			Utils.getSdpAccountProfileDataResponse(
					AccountMgmtServiceConstant.RET_DB_ERROR, dbe.getMessage(),
					null);
		}catch (GenericException ge) {
			if (ge.getMessage().equals("RET_USER_NOT_PRESENT")) {
				return Utils.getSdpAccountProfileDataResponse(
						AccountMgmtServiceConstant.RET_USER_NOT_PRESENT, null,
						null);
			} else if (ge.getMessage().equals("RET_CRM_ACC_NOT_EXIST")) {
				return Utils.getSdpAccountProfileDataResponse(
						AccountMgmtServiceConstant.RET_CRM_ACC_NOT_EXIST, null,
						null);
			} else {
				return Utils.getSdpAccountProfileDataResponse(
						AccountMgmtServiceConstant.RET_GENERIC_ERROR,
						ge.getMessage(), null);
			}
		}

		return accountResponse;
	}

}
